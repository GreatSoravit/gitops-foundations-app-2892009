version: 2.1
# Include Kubernetes orb definition
orbs:
  kubernetes: circleci/kubernetes@2.0.0 # Use a specific, stable version like @1.2.0 or @2.0.0

jobs:
  build:
    docker:
      - image: circleci/openjdk:stretch
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run: ./mvnw -Dmaven.test.skip=true clean package
      - persist_to_workspace:
          root: ./
          paths:
            - target/
      - setup_remote_docker #version: 19.03.13

      # Diagnostic step: Print Docker Hub username to verify it's set
      - run:
          name: Verify DockerHub Username
          command: |
            echo "DOCKERHUB_USERNAME is: ${DOCKERHUB_USERNAME}"
            if [ -z "$DOCKERHUB_USERNAME" ]; then
              echo "Error: DOCKERHUB_USERNAME is empty. Please set it in CircleCI environment variables."
              exit 1
            fi
            
      # build and push Docker image
      - run: 
          name: build and push Docker image
          command: |            
            # Use a dynamic tag, e.g., commit SHA or CircleCI build number
            export TAG="circleci-$CIRCLE_BUILD_NUM"
            echo "Building image with tag: $TAG"
            docker build -t $DOCKERHUB_USERNAME/gitops-foundations:$TAG --build-arg JAR_FILE=*.jar .
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/gitops-foundations:$TAG
            
  deploy:
    docker:
      - image: cimg/base:current # A base image with Git and common tools like `sed`
    steps:
      - checkout
      - run:
          name: Configure Git User
          command: |
            git config user.email "circleci@example.com" # Use a dedicated email for CI commits
            git config user.name "CircleCI Bot"

       - run:
          name: Checkout Manifests Repository
          command: |
            # Ensure GIT_USERNAME and GIT_TOKEN are available in a CircleCI Context (e.g., 'GitOps')
            git clone "https://$GIT_USERNAME:$GIT_TOKEN@github.com/GreatSoravit/gitops-foundations-env-2892009.git" manifests-repo
            echo "Manifests repository cloned into: $(pwd)/manifests-repo"
            
      - run:
          name: Render deployment.yaml using envsubst
          command: |
            # Create the output directory within the cloned repo if it doesn't exist
            mkdir -p manifests-repo/argo
            
            # Use envsubst to replace variables and output to a new file
            envsubst < manifests-repo/argo/deployment.yaml > manifests-repo/argo/deployment-rendered.yaml
            echo "--- Rendered deployment.yaml ---"
            cat manifests-repo/argo/deployment-rendered.yaml
            echo "------------------------------"
            
      - run:
          name: Load Image Tag from Build Job
          command: |
            source $BASH_ENV # Load the IMAGE_TAG exported from the build job
            echo "Image tag for deployment: $IMAGE_TAG"
            K8S_MANIFEST_PATH="argo/deployment.yaml" 

      # Install kubectl using the Kubernetes Orb
      - kubernetes/install-kubectl:
          version: 1.36.0 # Specify a kubectl version compatible with your Minikube

      # Deploy the rendered manifest directly to Kubernetes
      - kubernetes/create-or-update-resource:
          resource-file-path: manifests-repo/argo/deployment-rendered.yaml # Path now refers to the cloned repo
          resource-name: deployment/gitops-foundations # Use your deployment name
          # You might need to configure kubectl context for Minikube here.
          # This typically involves setting KUBECONFIG or using the Kubernetes orb's authentication.
          # For Minikube, you might need to use a self-hosted runner or expose Minikube.
          # This part is complex for a remote CircleCI job to Minikube.

workflows:
  main:
    jobs:
      - build:
          context: DockerHub
      - deploy:
          requires:
            - build # Ensure deploy runs only after build is successful
          context: # Add contexts needed for Git push and CircleCI Project ID
            - DockerHub # If DOCKERHUB_USERNAME/PASSWORD are needed here (unlikely for deploy job)
            - GitOps # A new context for GIT_USERNAME, GIT_TOKEN, CIRCLECI_PROJECT_ID
